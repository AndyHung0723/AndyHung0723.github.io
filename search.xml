<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Docker] 建立 Domino Server Container]]></title>
    <url>%2F2018%2F12%2F09%2F2018-12-09_DockerOnDomino-Setting%2F</url>
    <content type="text"><![CDATA[將參加IBM Domino 10體驗營時實作Docker的方式記錄下來。 前言暌違五年，在今年10月IBM終於正式發布Doimno第10版。新版著重於三大特色：支援Node.js開發、可將Domino Server建立在Docker上以及在iPad上運行Domino等。而本文的內容是如何在Docker上建立Domino Server及運行。 目的製作一個Docker Container，包含 CentOS 與 Domino V10 Server，並成功在Docker上運行Domino Server。 環境 VirtualBox 虛擬機 Ubuntu 18.04.1 LTS 在Ubuntu上安裝Docker 參考Docker官方網站文件中安裝流程：https://docs.docker.com/install/linux/docker-ce/ubuntu/ 安裝後建議調整： 開機時自動啟動Docker 12$ systemctl start docker$ systemctl enable docker 允許非root帳戶使用Docker 1$ sudo usermod -aG docker $&#123;USER&#125; 所需檔案 需要先準備兩個資料夾，dom 與 dom_on_docker dom：包含Domino Server壓縮檔(tar) dom_on_docker：包含domino10與setupdomino兩個目錄，內容為產生image用的Dockerfile、相關Script與ServerConfig 相關檔案在網路上都有善心人士撰寫好並提供，下載網址：https://www.eknori.de/_data/domino_on_docker.zip想了解Dockerfile相關內容可參考：https://www.eknori.de/2017-08-20/domino-on-docker/ 對下載完後檔案進行相關調整 整理檔案與更名– dom &nbsp;&nbsp;– DOMINO_10.0_64_BIT_LIN_XS_EN.tar– dom_on_docker &nbsp;&nbsp;– domino10 &nbsp;&nbsp;&nbsp;&nbsp;– resources &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– initscripts &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino_config_notes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino_script &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– serverconfig &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– domino10_response &nbsp;&nbsp;&nbsp;&nbsp;– Dockerfile &nbsp;&nbsp;– setup_domino &nbsp;&nbsp;&nbsp;&nbsp;– resources &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– docker-entrypoint &nbsp;&nbsp;&nbsp;&nbsp;– Dockerfile 修改domino10/Dockerfile 修改setup_domino/Dockerfile 建置流程 先將centos image pull 下來 1$ docker pull centos 將dom與dom_on_docker放置到指定路徑下(本文為根目錄下docker目錄)，並將目前位置切換至該目錄 1$ cd docker 製作images檔，將Domino安裝到CentOS上 1$ docker build -t zn/domino:v10_0_EN -f dom_on_docker/domino10/Dockerfile . 製作另一images檔，啟用必要端口Remote Server Setup連線資訊 1$ docker build -t zn/domino:Domino_v10_0_EN -f dom_on_docker/setup_domino/Dockerfile . 創建一個volume來儲存/local/notesdata 1$ docker volume create --name=domino_data 啟動Container 1$ docker run -it -p 1352:1352 -p 8888:80 -p 8443:4443 --name Domino_v10_0_EN -v domino_data:/local/notesdata zn/domino:Domino_v10_0_EN 開啟Remote Server Setup進行設定設定完成後container會自動關閉 重新啟動container 1$ docker start Domino_v10_0_EN 進入container中 1$ docker attach Domino_v10_0_EN 觀看Domino Server Console 1$ rc_domino_script monitor #此為自定義的script Domino Server已經成功運行在Docker上囉！ 其餘rc_domino_script相關指令 啟動Domino Server 1$ rc_domino_script start 停止Domino Server 1$ rc_domino_script stop 參考資料Docker官方網站-在linux上安裝DockerDocker and IBM Domino系列文Domino on Docker]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Domino Server</tag>
        <tag>Domino10</tag>
        <tag>Domino on Docker</tag>
        <tag>Domino on Docker Container</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Java] 數字計算：使用BigInteger與BigDecimal]]></title>
    <url>%2F2018%2F12%2F06%2F2018-12-05-Hexo-Next-md%2F</url>
    <content type="text"><![CDATA[Java與其他大部分程式語言都是使用IEEE754演算標準，在小數計算上會有誤差，所以需要精確的做四則運算，需要更適用的類別來處理。 BigInteger在Java中整數的最大值為9223372036854775807，最小值是-9223372036854775808，如果要表示超過這個範圍的數字，就要使用BigInteger類別。 因為數字已經大於int及long的範圍了，所以傳入BigInteger中時會使用String1BigInteger n = new BigInteger("9223372036854775808"); 四則運算則要用add、subtract、multiply、divide等(有BigInteger.ONE、BigInteger.TEN等保留字)123456BigInteger n1 = new BigInteger("9223372036854775808");BigInteger n2 = new BigInteger("9223372036854775809");n.add(n2);n.subtract(n2);n.multiply(n2);n.divide(n2); 兩數比較則可以用equals()與compareTo()123456BigInteger n1 = new BigInteger("200");BigInteger n2 = new BigInteger("100");n1.compareTo(n2);//相等回傳0，n1&gt;n2回傳1，n1&lt;n2回傳-1n1.equals(n2);//等於回傳true，否則回傳false BigInteger與基本型態之間的轉換123n1.longValue(); //轉為longn1.intValue(); //轉為intBigInteger.valueOf(100); //由int轉為BigInteger 如果由BigInteger轉回基本型態的數字超過基本型態可以容納的範圍，會使數字失去精度，此時就可以使用intValueExtract()、longValueExtract()等，使之拋出例外。123BigInteger n1 = new BigInteger("3333333333333333333333333");n1.intValueExact();//會拋出 java.lang.ArithmeticException例外 一般於Math類別常用的方法BigInteger也皆有支援(sqrt除外)123456BigInteger n1 = new BigInteger("200");BigInteger n2 = new BigInteger("100");n1.pow(2);n1.abs();n1.min(n2);n1.max(n2); BigDecimal與BigInteger方法大同小異，可以防止小數計算時因IEEE754規範所造成的誤差。比較特別的是四捨五入、無條件捨去、無條件進入的處理先提一下Math類別的處理：123Math.round(5.4); //四捨五入Math.ceil(5.4); //無條件進位Math.floor(5.4); //無條件捨去 要注意，無條件進位是往數字大的方向進位，無條件捨去是往數字小的方向捨去而此種進位方式如果牽扯到小數，有可能會因為IEEE754標準而發生誤差。舉例：-5.5用Math.round()四捨五入的結果會是-5此時就可以使用BigDecimal的進位方式：12345678BigDecimal r = new BigDecimal(-3.3456789); BigDecimal i1 = r.setScale(3,RoundingMode.UP);BigDecimal i2 = r.setScale(3,RoundingMode.DOWN);BigDecimal i3 = r.setScale(3,RoundingMode.CEILING);BigDecimal i4 = r.setScale(3,RoundingMode.FLOOR);BigDecimal i5 = r.setScale(3,RoundingMode.HALF_UP);BigDecimal i6 = r.setScale(3,RoundingMode.HALF_DOWN);BigDecimal i7 = r.setScale(3,RoundingMode.HALF_EVEN); UP：往該數絕對值大的方向進位 DOWN：往該數絕對值小的方向捨去 CEILING：與Math.ceil的進位方式相同 FLOOR：與Math.floor的進位方式相同 HALF_UP：四捨五入(不會有誤差) HALF_DOWN：五捨去，六以上進位 HALF_EVEN：銀行家捨入法 而BigDecimal可以用setScale來設定量級r.setScale(3,RoundingMode.HALF_UP)：這就代表四捨五入到小數點後第三位 比較一下其餘可能影響進位的類別 DecimalFormat(還是會有IEEE754所造成的精準度問題)：比較常用在格式化數字 12DecimalFormat df = new DecimalFormat("#.00");System.out.println(df.format(-3.155)); String.format：會無條件捨去 123double d = -3.146;String result = String.format("%.2f",d);System.out.println(result);]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>四則運算處理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo] Hexo 基本環境建置]]></title>
    <url>%2F2018%2F12%2F04%2F2018-12-04_Hexo_Created%2F</url>
    <content type="text"><![CDATA[Hexo優點 文章編輯使用MarkDown語法，好用且易學 可搭配GitHub Pages部屬，無須成本 中文支援度高 建立流程簡單，可快速搭建 有眾多優質的主題與外掛可搭配使用 環境安裝Git至官方網站下載並安裝 安裝Node.js至官方網站下載並安裝 初始化Hexo使用bash或命令提示字元依照以下流程進行建置 安裝CLI1$ npm install -g hexo-cli 初始化先建立好愈擺放部落格檔案的資料夾，並切換到該目錄下方(往後的操作都是在此目錄下進行)12$ cd &lt;folder&gt; #切換至目標目錄下$ hexo init &lt;folder&gt; #在該目錄下初始化Hexo相關套件 初始化完成後會建構一套預設版型與一篇範例文章 本地端運行1$ hexo server #或使用簡寫 hexo s 執行完成後造訪 http://localhost:4000 就會看到Hexo預設幫你建立好的網頁 建立GitHub PagesGithub提供兩種靜態網站1. 儲存庫的名稱為{用戶名稱}.github.io此類型每個帳號只能有一個，路徑為 https://{用戶名稱}.github.io 2. 任何專案下的gh-pages此類型沒有數量限制，路徑為 https://{用戶名稱}.github.io/{專案名稱} 建立儲存庫這邊使用第一種，新增一個以用戶名稱命名的儲存庫 將專案推到GitHub上12345$ git init$ git add .$ git commit -m "init"$ git remote add origin https://github.com/&#123;用戶名稱&#125;/&#123;用戶名稱&#125;.github.io.git$ git push -u origin master 部屬到GitHub Pages安裝自動部屬工具1$ npm install hexo-deployer-git --save 設定_config.yml於部落格目錄下找到_config.yml，搜尋檔案內的deploy區段並做以下設定 編譯出靜態網頁1$ hexo g 部屬到GitHub1$ hexo d 這樣就完成基本建置&amp;部屬囉！造訪 https://{用戶名稱}.github.io 可以觀看部屬上去的網站(有時須等待GitHub完成部屬，可能須等待3~5分鐘不等) 建立與刪除文章建立文章 執行以下指令建立新空白文章 1$ hexo new [postName] #postName為文章編輯，盡量以雙引號包裹避免錯誤 建立的文章會位於部落格目錄/source/_posts/目錄下 使用MarkDown完成編寫後，可先在本地端運行觀看成果 1$ hexo s 重新產生靜態頁面並部屬 1$ hexo d -g #這是上方教的 $ hexo g 與 $ hexo d 的結合版 刪除文章 於部落格目錄/source/_posts/找到愈刪除的文章檔案，執行刪除 清除已產生的靜態頁面 1$ hexo clean 重新產生靜態頁面並部屬 1$ hexo d -g #這是上方教的 $ hexo g 與 $ hexo d 的結合版 參考資料Hexo官方網站Hexo+GitHub，新手也可以快速建立部落格Hexo-環境建置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
