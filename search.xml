<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[計算機基礎] 編碼筆記]]></title>
    <url>%2Fposts%2FCharacter_Encoding.html</url>
    <content type="text"><![CDATA[在工作上常遇到編碼的問題，這邊筆記一下幾個常見的編碼。 ASCII&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基於拉丁字母(英文字母)的電腦編碼系統，現在有一個新名字叫 US-ASCII，共定義了128個字元，包括3個無法顯示的字元與128個可顯示字元。33個無法顯示的字元為控制字元，用來操控已經處理過的字元(換頁、空字元、刪除等)，目前大多數已經都廢除不用了。想要在畫面上表示這些字元，可以用 Unicode 或是跳脫字元表示法來表示。ASCII 長度原先是 7bits，但為了滿足需求要表達一些西歐字母，衍生出了一套延伸的編碼系統，稱為 Extended ASCII(EASCII)。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缺點：因為它只能用來表示數字、英文字母與英式符號，所以現在大部分都採用 Unicode。 EASCII&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;將 ASCII 從 7bits 擴充到 8bits 而衍生出來的，共定義了256個字元(0~255) ISO-8859-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8bits 編碼，以 ASCII 為基礎。 Window-1252&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8bits 編碼，包含 ISO-8859-1 所有字，但碼位有些不同。 Big5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;台灣制定的，後來微軟的 MS950 就是以他為基準創建的，兩者基本上無太大差別(多了碁銹裏墻恒粧嫺和一些日文符號，是參考倚天擴充字集)雙位元組 2bytes，有些異體字沒有被收錄進去(堃、煊、栢…)，有提供造字區。 Unicode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;為了解決編碼百家爭鳴的情況，誕生了 Unicode，將世上所有的字元符號都收錄其中，它是一個字元集，每個字元皆為 2bytes 大小。但如果像 ASCII 這種只需要用 7bit 就可以表示的字元，每個都給它 2bytes 的話很浪費空間，所以就發展出了 UTF-8、UTF-16、UTF-32 等轉換格式(Unicode Transformation Format)用來實現 Unicode。 UTF-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UTF-8 就是 Unicode 的其中一種實現方式。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它的特點就是根據字元在 Unicode 中的代號，變化本身編碼的長度，但都是以 8bits(1bytes) 為一個單位來伸縮。像是ASCII字元如果用 UTF-8 編碼就會只占用 1bytes，中文字可能就會占用到 2~3bytes。 Little endian 和 Big endian&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 UCS-2 格式(可以想成就是 UTF-16 編碼，也就是 2bytes)中有一個叫做”ZERO WIDTH NO-BREAK SPACE” 的字符，它會在文件的最前面加上2個 bytes，用來決定文中每個字元的編碼第一個位元組要在前還是第二個位元組要在前。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一個位元組在前就稱為 Big endian。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二個位元組在前就稱為 Little endian。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;這兩個bytes的標記也稱為 BOM(Byte Order Mark)。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;某些文字編輯器中也會在 UTF-8 時在文件最前面加上 BOM 標記，可是 UTF-8 不會有字節順序的問題，所以在 UTF-8 中使用 BOM 標記的用途只是讓別的編輯器知道你現在是用 UTF-8 編碼，但很多程式語言或是 HTML 等並不會自己排除 BOM 標記，所以使用 UTF-8 編碼要特別注意這點。 ANSI&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是 Windows 系統中特有的一個名詞，並不是一種獨立的編碼系統，在不同語系 Windows 系統的系統中，ANSI 的編碼就不同，它會根據你的系統的語系，來對應到微軟自己不同的 Windows Code Page 編碼，到 Windows Command 下 chcp 就可以知道目前用的 Windows Code Page，像語系是台灣的話預設就會是Windows Code Pages 950(就是常聽到的MS950)。]]></content>
      <categories>
        <category>計算機基礎</category>
      </categories>
      <tags>
        <tag>Computer Science</tag>
        <tag>Character-Encoding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[JavaScript] 深入JS - 作用域]]></title>
    <url>%2Fposts%2FJavaScript-Core_Scope.html</url>
    <content type="text"><![CDATA[重新認識 JavaScript 的作用域 何謂作用域 ?有「作用」的區「域」，顧名思義在宣告一個變數時，它們在程式中哪些地方有辦法被存取到，這些地方就稱為這個變數的作用域。 如圖，在 JavaScript 中，紅框部分就稱為 hi 變數的作用域 靜態作用域與動態作用域 靜態? 動態?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在大部分的程式語言中，靜態與動態是一個形容詞，可以套用在很多名詞上，例如：靜態變數、動態變數、靜態函式、動態函式，就連程式語言也有分靜態語言與動態語言。雖然這兩個形容詞好像一天到晚出現在各種地方，但其主要代表的概念是差不多的。靜態是指程式在開始執行前某些特性就已經決定了，不會也不可以在程式執行中對這個特性進行改變；反之，動態就是程式在執行中的時候，才會決定某些特性。這樣看起來可能會有點抽象，下面談到作用域時會清楚一點。 靜態作用域與動態作用域&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;靜態作用域，又稱為語法作用域(Lexical Scope)，其特性是語法解析時就已經確定作用域。意思就是程式執行前就已經確定了它能夠被存取的地方，且不會再改變。如果在該作用域中找不到某個變數時，就會自動往上一層查找。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;與之相對的是動態作用域，其特性是進行函式調用的時才決定它的作用域。意思就是要等到程式執行到函數被呼叫時，才會決定函數中變數的作用域。123456789var value = 1;function fn1() &#123; console.log(value);&#125;function fn2() &#123; var value = 2; fn1();&#125;fn2(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上這段程式，如果在靜態作用域的語言中執行，將會在 fn1 中先查找有無 value 變數，若找不到就會往上一層的全域進行查找，因此最終會輸出「1」。但若是在動態作用域的語言中執行，將會在呼叫 fn1 的 fn2 中查找 value，因此會輸出「2」。 靜態作用域種類根據劃分「域」的界線，可分為以下幾種： 全局作用域簡稱「全域」，變數的作用域範圍為整個程式碼。 如圖，在 JavaScript 中，name 變數的作用域為整個程式碼，因此稱 name 為全域變數 函數作用域變數在函數內部宣告，且作用域只在函數內部。 如圖，在 JavaScript 中，hi 變數的作用域為 sayHi 這個函式包起來的區域，因此 hi 又可稱為區域變數 區塊作用域變數在區塊包起來的區域宣告， 且作用域範圍為區塊包起來的區域。 如圖，在 JavaScript 中，變數 i 宣告在 for 區塊內，所以只在 for 區塊內能夠存取 講了這麼多，最後只要知道以下結論就好： JavaScript 是採用語法作用域，ES6 以前只有全局作用域與函式作用域，ES6 以後 let 與 const 為區塊作用域。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[AIX] SCP 不用密碼傳輸檔案]]></title>
    <url>%2Fposts%2FSCP_None_Password.html</url>
    <content type="text"><![CDATA[在工作上遇到有此需求，所以將方式記錄下來。因為我沒有AIX，所以此處用CentOS模擬。 方式在來源端產生SSH Key，並將公鑰加到目的端的authorized_keys檔案中。 步驟 在來源端先切換至.ssh目錄下 1$ cd ~/.ssh 產生 id_rsa、id_rsa.pub兩key，所有詢問皆按enter即可。 1$ ssh-keygen -t rsa 將id_rsa.pub複製到目的端，會詢問目的端密碼。 1$ scp ~/.ssh/id_rsa.pub xxx@xxx.xxx.xxx.xxx:/xxx/.ssh/ 註：若為第一次對該目的端server使用ssh連線，則會出現Are you sure you want to continue connecting(yes/no)? 此處輸入yes後就會開始連線，並同時將目的地server的public key加入~/.ssh/known_hosts檔案中。下次再對此台server進行ssh連線時就不會再詢問此問題。 轉至目的端，切換至.ssh目錄下 1$ cd ~/.ssh 將id_rsa.pub內容加到authorized_keys中 1$ cat id_rsa.pub &gt;&gt; authorized_keys 再去傳輸檔案就不會要求輸入密碼了。]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>AIX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Docker] 建立 Domino Server Container]]></title>
    <url>%2Fposts%2FDominoOnDocker.html</url>
    <content type="text"><![CDATA[將參加IBM Domino 10體驗營時實作Docker的方式記錄下來。 前言暌違五年，在今年10月IBM終於正式發布Doimno第10版。新版著重於三大特色：支援Node.js開發、可將Domino Server建立在Docker上以及在iPad上運行Domino等。而本文的內容是如何在Docker上建立Domino Server及運行。 目的製作一個Docker Container，包含 CentOS 與 Domino V10 Server，並成功在Docker上運行Domino Server。 環境 VirtualBox 虛擬機 Ubuntu 18.04.1 LTS 在Ubuntu上安裝Docker 參考Docker官方網站文件中安裝流程：https://docs.docker.com/install/linux/docker-ce/ubuntu/ 安裝後建議調整： 開機時自動啟動Docker 12$ systemctl start docker$ systemctl enable docker 允許非root帳戶使用Docker 1$ sudo usermod -aG docker $&#123;USER&#125; 所需檔案 需要先準備兩個資料夾，dom 與 dom_on_docker dom：包含Domino Server壓縮檔(tar) dom_on_docker：包含domino10與setupdomino兩個目錄，內容為產生image用的Dockerfile、相關Script與ServerConfig 相關檔案在網路上都有善心人士撰寫好並提供，下載網址：https://www.eknori.de/_data/domino_on_docker.zip想了解Dockerfile相關內容可參考：https://www.eknori.de/2017-08-20/domino-on-docker/ 對下載完後檔案進行相關調整 整理檔案與更名– dom &nbsp;&nbsp;– DOMINO_10.0_64_BIT_LIN_XS_EN.tar– dom_on_docker &nbsp;&nbsp;– domino10 &nbsp;&nbsp;&nbsp;&nbsp;– resources &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– initscripts &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino_config_notes &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – rc_domino_script &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– serverconfig &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– domino10_response &nbsp;&nbsp;&nbsp;&nbsp;– Dockerfile &nbsp;&nbsp;– setup_domino &nbsp;&nbsp;&nbsp;&nbsp;– resources &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;– docker-entrypoint &nbsp;&nbsp;&nbsp;&nbsp;– Dockerfile 修改domino10/Dockerfile 修改setup_domino/Dockerfile 建置流程 先將centos image pull 下來 1$ docker pull centos 將dom與dom_on_docker放置到指定路徑下(本文為根目錄下docker目錄)，並將目前位置切換至該目錄 1$ cd docker 製作images檔，將Domino安裝到CentOS上 1$ docker build -t zn/domino:v10_0_EN -f dom_on_docker/domino10/Dockerfile . 製作另一images檔，啟用必要端口Remote Server Setup連線資訊 1$ docker build -t zn/domino:Domino_v10_0_EN -f dom_on_docker/setup_domino/Dockerfile . 創建一個volume來儲存/local/notesdata 1$ docker volume create --name=domino_data 啟動Container 1$ docker run -it -p 1352:1352 -p 8888:80 -p 8443:4443 --name Domino_v10_0_EN -v domino_data:/local/notesdata zn/domino:Domino_v10_0_EN 開啟Remote Server Setup進行設定設定完成後container會自動關閉 重新啟動container 1$ docker start Domino_v10_0_EN 進入container中 1$ docker attach Domino_v10_0_EN 觀看Domino Server Console 1$ rc_domino_script monitor #此為自定義的script Domino Server已經成功運行在Docker上囉！ 其餘rc_domino_script相關指令 啟動Domino Server 1$ rc_domino_script start 停止Domino Server 1$ rc_domino_script stop 參考資料Docker官方網站-在linux上安裝DockerDocker and IBM Domino系列文Domino on Docker]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Domino Server</tag>
        <tag>Domino10</tag>
        <tag>Domino on Docker</tag>
        <tag>Domino on Docker Container</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Java] 數字計算：使用BigInteger與BigDecimal]]></title>
    <url>%2Fposts%2FJava_BigInteger_BigDecimal.html</url>
    <content type="text"><![CDATA[Java與其他大部分程式語言都是使用IEEE754演算標準，在小數計算上會有誤差，所以需要精確的做四則運算，需要更適用的類別來處理。 BigInteger在Java中整數的最大值為9223372036854775807，最小值是-9223372036854775808，如果要表示超過這個範圍的數字，就要使用BigInteger類別。 因為數字已經大於int及long的範圍了，所以傳入BigInteger中時會使用String1BigInteger n = new BigInteger("9223372036854775808"); 四則運算則要用add、subtract、multiply、divide等(有BigInteger.ONE、BigInteger.TEN等保留字)123456BigInteger n1 = new BigInteger("9223372036854775808");BigInteger n2 = new BigInteger("9223372036854775809");n.add(n2);n.subtract(n2);n.multiply(n2);n.divide(n2); 兩數比較則可以用equals()與compareTo()123456BigInteger n1 = new BigInteger("200");BigInteger n2 = new BigInteger("100");n1.compareTo(n2);//相等回傳0，n1&gt;n2回傳1，n1&lt;n2回傳-1n1.equals(n2);//等於回傳true，否則回傳false BigInteger與基本型態之間的轉換123n1.longValue(); //轉為longn1.intValue(); //轉為intBigInteger.valueOf(100); //由int轉為BigInteger 如果由BigInteger轉回基本型態的數字超過基本型態可以容納的範圍，會使數字失去精度，此時就可以使用intValueExtract()、longValueExtract()等，使之拋出例外。123BigInteger n1 = new BigInteger("3333333333333333333333333");n1.intValueExact();//會拋出 java.lang.ArithmeticException例外 一般於Math類別常用的方法BigInteger也皆有支援(sqrt除外)123456BigInteger n1 = new BigInteger("200");BigInteger n2 = new BigInteger("100");n1.pow(2);n1.abs();n1.min(n2);n1.max(n2); BigDecimal與BigInteger方法大同小異，可以防止小數計算時因IEEE754規範所造成的誤差。比較特別的是四捨五入、無條件捨去、無條件進入的處理先提一下Math類別的處理：123Math.round(5.4); //四捨五入Math.ceil(5.4); //無條件進位Math.floor(5.4); //無條件捨去 要注意，無條件進位是往數字大的方向進位，無條件捨去是往數字小的方向捨去而此種進位方式如果牽扯到小數，有可能會因為IEEE754標準而發生誤差。舉例：-5.5用Math.round()四捨五入的結果會是-5此時就可以使用BigDecimal的進位方式：12345678BigDecimal r = new BigDecimal(-3.3456789); BigDecimal i1 = r.setScale(3,RoundingMode.UP);BigDecimal i2 = r.setScale(3,RoundingMode.DOWN);BigDecimal i3 = r.setScale(3,RoundingMode.CEILING);BigDecimal i4 = r.setScale(3,RoundingMode.FLOOR);BigDecimal i5 = r.setScale(3,RoundingMode.HALF_UP);BigDecimal i6 = r.setScale(3,RoundingMode.HALF_DOWN);BigDecimal i7 = r.setScale(3,RoundingMode.HALF_EVEN); UP：往該數絕對值大的方向進位 DOWN：往該數絕對值小的方向捨去 CEILING：與Math.ceil的進位方式相同 FLOOR：與Math.floor的進位方式相同 HALF_UP：四捨五入(不會有誤差) HALF_DOWN：五捨去，六以上進位 HALF_EVEN：銀行家捨入法 而BigDecimal可以用setScale來設定量級r.setScale(3,RoundingMode.HALF_UP)：這就代表四捨五入到小數點後第三位 比較一下其餘可能影響進位的類別 DecimalFormat(還是會有IEEE754所造成的精準度問題)：比較常用在格式化數字 12DecimalFormat df = new DecimalFormat("#.00");System.out.println(df.format(-3.155)); String.format：會無條件捨去 123double d = -3.146;String result = String.format("%.2f",d);System.out.println(result);]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>四則運算處理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Hexo] Hexo 基本環境建置]]></title>
    <url>%2Fposts%2FHexoSetting.html</url>
    <content type="text"><![CDATA[Hexo優點 文章編輯使用MarkDown語法，好用且易學 可搭配GitHub Pages部屬，無須成本 中文支援度高 建立流程簡單，可快速搭建 有眾多優質的主題與外掛可搭配使用 環境安裝Git至官方網站下載並安裝 安裝Node.js至官方網站下載並安裝 初始化Hexo使用bash或命令提示字元依照以下流程進行建置 安裝CLI1$ npm install -g hexo-cli 初始化先建立好愈擺放部落格檔案的資料夾，並切換到該目錄下方(往後的操作都是在此目錄下進行)12$ cd &lt;folder&gt; #切換至目標目錄下$ hexo init &lt;folder&gt; #在該目錄下初始化Hexo相關套件 初始化完成後會建構一套預設版型與一篇範例文章 本地端運行1$ hexo server #或使用簡寫 hexo s 執行完成後造訪 http://localhost:4000 就會看到Hexo預設幫你建立好的網頁 建立GitHub PagesGithub提供兩種靜態網站1. 儲存庫的名稱為{用戶名稱}.github.io此類型每個帳號只能有一個，路徑為 https://{用戶名稱}.github.io 2. 任何專案下的gh-pages此類型沒有數量限制，路徑為 https://{用戶名稱}.github.io/{專案名稱} 建立儲存庫這邊使用第一種，新增一個以用戶名稱命名的儲存庫 將專案推到GitHub上12345$ git init$ git add .$ git commit -m "init"$ git remote add origin https://github.com/&#123;用戶名稱&#125;/&#123;用戶名稱&#125;.github.io.git$ git push -u origin master 部屬到GitHub Pages安裝自動部屬工具1$ npm install hexo-deployer-git --save 設定_config.yml於部落格目錄下找到_config.yml，搜尋檔案內的deploy區段並做以下設定 編譯出靜態網頁1$ hexo g 部屬到GitHub1$ hexo d 這樣就完成基本建置&amp;部屬囉！造訪 https://{用戶名稱}.github.io 可以觀看部屬上去的網站(有時須等待GitHub完成部屬，可能須等待3~5分鐘不等) 建立與刪除文章建立文章 執行以下指令建立新空白文章 1$ hexo new [postName] #postName為文章編輯，盡量以雙引號包裹避免錯誤 建立的文章會位於部落格目錄/source/_posts/目錄下 使用MarkDown完成編寫後，可先在本地端運行觀看成果 1$ hexo s 重新產生靜態頁面並部屬 1$ hexo d -g #這是上方教的 $ hexo g 與 $ hexo d 的結合版 刪除文章 於部落格目錄/source/_posts/找到愈刪除的文章檔案，執行刪除 清除已產生的靜態頁面 1$ hexo clean 重新產生靜態頁面並部屬 1$ hexo d -g #這是上方教的 $ hexo g 與 $ hexo d 的結合版 參考資料Hexo官方網站Hexo+GitHub，新手也可以快速建立部落格Hexo-環境建置]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
